#pragma once

/*
* Interface to call the saliency algorithm  coded in CUDA. Two algorithms are in this implementation. Normal Non-local saliency and the one with saliency term. 
* A primal dual algorithm is used to solve iterative schema. See [1,2] for further details*
* [1] E. Alcaín, A. Muñoz, I. Ramírez, and E. Schiavi. Modelling Sparse Saliency Maps on Manifolds: Numerical Results and Applications, pages 157{175. Springer International Publishing, Cham, 2019.
* [2] Alcaín, E., Muñoz, A.I., Schiavi, E. et al. A non-smooth non-local variational approach to saliency detection in real time. J Real-Time Image Proc (2020). https://doi.org/10.1007/s11554-020-01016-4
* * NLTVSaliencyCuda is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* NLTVSaliencyCuda is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with fastms. If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2020 Eduardo Alcain Ballesteros eduardo.alcain.ballesteros@gmail.com Ana Muñoz anaisabel.munoz@urjc.es
*/


#ifndef __NLTV_Saliency_Alg_H__
#define __NLTV_Saliency_Alg_H__
#include <string>
#include <cusparse_v2.h>
#include <cublas_v2.h>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/opencv.hpp"
#include "ISuperpixel.h"
#include "cuda_runtime.h"
#include "NLTVSaliencyAlgKernel.h"
#include "SuperpixelParameters.h"
#include "SlicParameters.h"
#include "NVTimer.h"
#include "helper_cuda.h"
#include "MatrixIO.h"
#include "MatrixMatFile.h"

using namespace std;
using namespace cv;
class NLTVSaliencyAlg
{
public:
	enum AlgCudaVariant { Sal, SalPlus, SalStar };
	enum SalMethod { SalNLTV, SalNLTVSalTerm };
	struct SaliencyParameters {
		float r;
		float sigma2;
		// a positive constant for controlling the relative importance of the regularizer vs the fidelity in the functional
		float lambda;
		// descent primal discretization time (Primal-Dual Algorithm)
		float tau_p;
		// an ascent dual discretization time (Primal-Dual Algorithm)
		float tau_d;
		// epsilon  a stopping criteria, difference between consecutive values of the energy functional,tol=0  the algorithm iterate until maxIter
		float tol;
		// number maximum of iterations in the Primal-Dual Algorithm 0 means stop when the convergence criteria has reached 
		int maxIter;
		// delta > 0 acts as a threshold in the region domain separating background and saliency
		float deltaSalTerm;
		// models the relative importance of the likelihood and the saliency term 
		float alphaSalTerm;
		// display energy during the computation
		bool energyDisplayOn;
		// display images of the saliency during computation
		bool imgDisplayOn;	
		// write images after computation 
		bool imgWrite;
		// k-nearest neighbours 
		int k;
		// Superpixel in CPU or GPU (SLIC)
		SuperpixelAlgType spMethod;
		// NLTV=0, NLTVSalTerm=1
		SalMethod salMethod;
		
		// optimization to calculate the saliency algorithm 
		 AlgCudaVariant algCudaVariant;
		bool locationPrior;
		

	};

	NLTVSaliencyAlg();
	~NLTVSaliencyAlg();
	/** Algorithm the saliecny 
	* [1] E. Alcaín, A. Muñoz, I. Ramírez, and E. Schiavi. Modelling Sparse Saliency Maps on Manifolds: Numerical Results and Applications, pages 157{175. Springer International Publishing, Cham, 2019.
	* [2] Alcaín, E., Muñoz, A.I., Schiavi, E. et al. A non-smooth non-local variational approach to saliency detection in real time. J Real-Time Image Proc (2020). https://doi.org/10.1007/s11554-020-01016-4
	*  @param imagePath: path of the image
	*  @param superpixelsParameters superpixels parameters to apply the algorithm 
	*  @param saliencyParameters saliency parameters nedeed for the algorithm
	*  @param slicTimeInMs: Time for the SLIC part
	*  return time saliencyTimeInMs 
	*/
	float Execute(const std::string& imagePath, const SlicParameters & superpixelsParameters, const SaliencyParameters & saliencyParameters,float * slicTimeInMs);


private:
	SlicParameters superpixelsParameters;
	SaliencyParameters saliencyParameters;
	cusparseHandle_t handle;
	
	cublasHandle_t handlecublas;

	// --- Descriptor for sparse matrix A
	cusparseMatDescr_t descrA;


	/** Draw the saliency results in the pixel domain.
	*  @param saliency_mat: image to display the saliency [widthxheight]
	*  @param saliency_map_sp saliency probability of one superpixel (vector with outputNumSuperpixels)
	*  @param sp_labels labels [widthxheight] generated by the superpixel algorithm
	*  @param outputNumSuperpixels: number of superpixels
	*/
	void DrawMapSaliencyResult(cv::Mat& saliency_mat, float * saliency_map_sp, const  int * sp_labels,const  int outputNumSuperpixels);
	/** Superimpose the grid of the superpixels structure over the input image
	*  @param input_mat: image to display the superpixels over
	*  @param sp_grid_mat: output image  
	*  @param colour: colour for the superpixel grid
	*  @param sp_labels labels [widthxheight] generated by the superpixel algorithm	
	*/
	void DrawSuperpixelGrid(const cv::Mat& input_mat, cv::Mat& sp_grid_mat,const cv::Scalar& colour,const int * sp_labels);
	
};


#endif //  __NLTV_Saliency_Alg_H__